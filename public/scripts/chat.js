'use strict';function _toConsumableArray(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}return Array.from(a)}new Vue({el:'#app',delimiters:['${','}'],components:{'vue-pull-refresh':VuePullRefresh},data:{ws:null,message:'',chat:[],users:[],showUsers:!1},created:function created(){var a=this,b='https:'===window.location.protocol?'wss:':'ws:';this.ws=new WebSocket(b+'//'+window.location.host+'/ws'),this.ws.addEventListener('message',function(b){var c=JSON.parse(b.data);if('bootstrap'===c.type){var d=JSON.parse(b.data),e=d.messages,f=d.users;e.forEach(function(b){var c=b.id,d=b.userId,e=b.userName,f=b.avatar,g=b.type,h=b.content,i=b.date;a.chat.push({id:c,userId:d,userName:e,avatar:f,type:g,content:h,date:new Date(i)})}),a.users=[].concat(_toConsumableArray(f))}else if('messages'===c.type){var g=JSON.parse(b.data),h=g.messages;h.forEach(function(b){var c=b.id,d=b.userId,e=b.userName,f=b.avatar,g=b.type,h=b.content,i=b.date;a.chat.some(function(a){return a.id===c})||a.chat.push({id:c,userId:d,userName:e,avatar:f,type:g,content:h,date:new Date(i)})})}else{var i=c.id,j=c.userId,k=c.userName,l=c.avatar,m=c.type,n=c.content,o=c.date;a.chat.push({id:i,userId:j,userName:k,avatar:l,type:m,content:n,date:new Date(o)}),'login'===m?!a.users.some(function(a){return a.id===j})&&a.users.push({id:j,name:k,avatar:l}):'logout'===m&&a.users.some(function(a){return a.id===j})&&a.users.splice(a.users.findIndex(function(a){return a.id===j}),1)}a.chat.sort(function(c,a){return new Date(c.date)>new Date(a.date)?1:new Date(c.date)<new Date(a.date)?-1:0})}),this.ws.addEventListener('close',function(){a.chat.push({type:'warning',content:i18n.chat_warning_connection_closed}),a.ws=null}),this.ws.addEventListener('error',function(){a.chat.push({type:'warning',content:i18n.chat_warning_connection_error}),a.ws=null})},updated:function updated(){this.scrollToLast()},directives:{scroll:{componentUpdated:function componentUpdated(a,b,c,d){var e=2===d.children.length;app.__vue__.scrollToLast(e)}}},methods:{send:function send(){this.message&&(270<this.message.length||(this.ws&&this.ws.send(JSON.stringify({type:'message',content:this.message})),this.message=''))},scrollToLast:function scrollToLast(){var a=0<arguments.length&&arguments[0]!==void 0&&arguments[0],b=this.$refs.chat,c=a||b.scrollTop>b.scrollHeight-b.clientHeight-150;c&&(b.scrollTop=b.scrollHeight-b.clientHeight)},toggleUsers:function toggleUsers(){this.showUsers=!this.showUsers},onPullRefresh:function onPullRefresh(){var a=this;return new Promise(function(b,c){a.ws?(a.ws.send(JSON.stringify({type:'request',content:'olderMessages',date:a.chat[0].date})),a.ws.addEventListener('message',function(){return b()}),a.ws.addEventListener('error',function(){return c()})):c()})},formatDate:function formatDate(a){var b=new Date(a).setHours(0,0,0,0),c=new Date().setHours(0,0,0,0),d=new Date(new Date().setDate(new Date().getDate()-1)).setHours(0,0,0,0),e=b===c?i18n.date_today:b===d?i18n.date_yesterday:a.toLocaleString().slice(0,10),f=a.toTimeString().slice(0,5);return e+' '+i18n.date_at+' '+f}}});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,